/*
 * test_msgframe.cpp
 *
 *  Created on: Jan 20, 2016
 *      Author: netmind
 */

#define LOG_LEVEL LOG_INFO

#include <gtest/gtest.h>

#include "../cahttp/flog.h"
#include "../cahttp/CaHttpFrame.h"
#include "../cahttp/HttpMsgFrame2.h"
using namespace edft;
using namespace cahttp;

#if 0
HTTP/1.1 200 OK
Content-Type: application/json; charset=utf-8
Content-Disposition: attachment
Cache-Control: no-transform
X-Content-Type-Options: nosniff
Pragma: no-cache
Date: Wed, 20 Jan 2016 02:17:56 GMT
Server: S3 v1.0
X-XSS-Protection: 1; mode=block
X-Frame-Options: SAMEORIGIN
Accept-Ranges: none
Vary: Accept-Encoding
Transfer-Encoding: chunked

e
{"result":[]}

134
{"result":[{"alternative":[{"transcript":"...... ... ... ... ...............","confidence":0.86303794},{"transcript":"1 2 3 4 ..............."},{"transcript":"1234 ..............."},{"transcript":"............... ..............."},{"transcript":"1 2 3 4 5 ..............."}],"final":true}],"result_index":0}

0


#endif

static unsigned char gtec1[] = {
0x48,0x54,0x54,0x50,0x2f,0x31,0x2e,0x31,0x20,0x32,0x30,0x30,0x20,0x4f,0x4b,0x0d,
0x0a,0x43,0x6f,0x6e,0x74,0x65,0x6e,0x74,0x2d,0x54,0x79,0x70,0x65,0x3a,0x20,0x61,
0x70,0x70,0x6c,0x69,0x63,0x61,0x74,0x69,0x6f,0x6e,0x2f,0x6a,0x73,0x6f,0x6e,0x3b,
0x20,0x63,0x68,0x61,0x72,0x73,0x65,0x74,0x3d,0x75,0x74,0x66,0x2d,0x38,0x0d,0x0a,
0x43,0x6f,0x6e,0x74,0x65,0x6e,0x74,0x2d,0x44,0x69,0x73,0x70,0x6f,0x73,0x69,0x74,
0x69,0x6f,0x6e,0x3a,0x20,0x61,0x74,0x74,0x61,0x63,0x68,0x6d,0x65,0x6e,0x74,0x0d,
0x0a,0x43,0x61,0x63,0x68,0x65,0x2d,0x43,0x6f,0x6e,0x74,0x72,0x6f,0x6c,0x3a,0x20,
0x6e,0x6f,0x2d,0x74,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x0d,0x0a,0x58,0x2d,
0x43,0x6f,0x6e,0x74,0x65,0x6e,0x74,0x2d,0x54,0x79,0x70,0x65,0x2d,0x4f,0x70,0x74,
0x69,0x6f,0x6e,0x73,0x3a,0x20,0x6e,0x6f,0x73,0x6e,0x69,0x66,0x66,0x0d,0x0a,0x50,
0x72,0x61,0x67,0x6d,0x61,0x3a,0x20,0x6e,0x6f,0x2d,0x63,0x61,0x63,0x68,0x65,0x0d,
0x0a,0x44,0x61,0x74,0x65,0x3a,0x20,0x57,0x65,0x64,0x2c,0x20,0x32,0x30,0x20,0x4a,
0x61,0x6e,0x20,0x32,0x30,0x31,0x36,0x20,0x30,0x32,0x3a,0x31,0x37,0x3a,0x35,0x36,
0x20,0x47,0x4d,0x54,0x0d,0x0a,0x53,0x65,0x72,0x76,0x65,0x72,0x3a,0x20,0x53,0x33,
0x20,0x76,0x31,0x2e,0x30,0x0d,0x0a,0x58,0x2d,0x58,0x53,0x53,0x2d,0x50,0x72,0x6f,
0x74,0x65,0x63,0x74,0x69,0x6f,0x6e,0x3a,0x20,0x31,0x3b,0x20,0x6d,0x6f,0x64,0x65,
0x3d,0x62,0x6c,0x6f,0x63,0x6b,0x0d,0x0a,0x58,0x2d,0x46,0x72,0x61,0x6d,0x65,0x2d,
0x4f,0x70,0x74,0x69,0x6f,0x6e,0x73,0x3a,0x20,0x53,0x41,0x4d,0x45,0x4f,0x52,0x49,
0x47,0x49,0x4e,0x0d,0x0a,0x41,0x63,0x63,0x65,0x70,0x74,0x2d,0x52,0x61,0x6e,0x67,
0x65,0x73,0x3a,0x20,0x6e,0x6f,0x6e,0x65,0x0d,0x0a,0x56,0x61,0x72,0x79,0x3a,0x20,
0x41,0x63,0x63,0x65,0x70,0x74,0x2d,0x45,0x6e,0x63,0x6f,0x64,0x69,0x6e,0x67,0x0d,
0x0a,0x54,0x72,0x61,0x6e,0x73,0x66,0x65,0x72,0x2d,0x45,0x6e,0x63,0x6f,0x64,0x69,
0x6e,0x67,0x3a,0x20,0x63,0x68,0x75,0x6e,0x6b,0x65,0x64,0x0d,0x0a,0x0d,0x0a,0x65,
0x0d,0x0a,0x7b,0x22,0x72,0x65,0x73,0x75,0x6c,0x74,0x22,0x3a,0x5b,0x5d,0x7d,0x0a,
0x0d,0x0a};
static unsigned char gtec2[] = {
0x31,0x33,0x34,0x0d,0x0a,0x7b,0x22,0x72,0x65,0x73,0x75,0x6c,0x74,0x22,0x3a,0x5b,
0x7b,0x22,0x61,0x6c,0x74,0x65,0x72,0x6e,0x61,0x74,0x69,0x76,0x65,0x22,0x3a,0x5b,
0x7b,0x22,0x74,0x72,0x61,0x6e,0x73,0x63,0x72,0x69,0x70,0x74,0x22,0x3a,0x22,0xed,
0x95,0x98,0xeb,0x82,0x98,0x20,0xeb,0x91,0x98,0x20,0xec,0x85,0x8b,0x20,0xeb,0x84,
0xb7,0x20,0xec,0x95,0x88,0xeb,0x85,0x95,0xed,0x95,0x98,0xec,0x84,0xb8,0xec,0x9a,
0x94,0x22,0x2c,0x22,0x63,0x6f,0x6e,0x66,0x69,0x64,0x65,0x6e,0x63,0x65,0x22,0x3a,
0x30,0x2e,0x38,0x36,0x33,0x30,0x33,0x37,0x39,0x34,0x7d,0x2c,0x7b,0x22,0x74,0x72,
0x61,0x6e,0x73,0x63,0x72,0x69,0x70,0x74,0x22,0x3a,0x22,0x31,0x20,0x32,0x20,0x33,
0x20,0x34,0x20,0xec,0x95,0x88,0xeb,0x85,0x95,0xed,0x95,0x98,0xec,0x84,0xb8,0xec,
0x9a,0x94,0x22,0x7d,0x2c,0x7b,0x22,0x74,0x72,0x61,0x6e,0x73,0x63,0x72,0x69,0x70,
0x74,0x22,0x3a,0x22,0x31,0x32,0x33,0x34,0x20,0xec,0x95,0x88,0xeb,0x85,0x95,0xed,
0x95,0x98,0xec,0x84,0xb8,0xec,0x9a,0x94,0x22,0x7d,0x2c,0x7b,0x22,0x74,0x72,0x61,
0x6e,0x73,0x63,0x72,0x69,0x70,0x74,0x22,0x3a,0x22,0xed,0x95,0x98,0xeb,0x82,0x98,
0xeb,0x91,0x98,0xec,0x85,0x8b,0xeb,0x84,0xb7,0x20,0xec,0x95,0x88,0xeb,0x85,0x95,
0xed,0x95,0x98,0xec,0x84,0xb8,0xec,0x9a,0x94,0x22,0x7d,0x2c,0x7b,0x22,0x74,0x72,
0x61,0x6e,0x73,0x63,0x72,0x69,0x70,0x74,0x22,0x3a,0x22,0x31,0x20,0x32,0x20,0x33,
0x20,0x34,0x20,0x35,0x20,0xec,0x95,0x88,0xeb,0x85,0x95,0xed,0x95,0x98,0xec,0x84,
0xb8,0xec,0x9a,0x94,0x22,0x7d,0x5d,0x2c,0x22,0x66,0x69,0x6e,0x61,0x6c,0x22,0x3a,
0x74,0x72,0x75,0x65,0x7d,0x5d,0x2c,0x22,0x72,0x65,0x73,0x75,0x6c,0x74,0x5f,0x69,
0x6e,0x64,0x65,0x78,0x22,0x3a,0x30,0x7d,0x0a,0x0d,0x0a,
0x30,0x0d,0x0a,0x0d,0x0a
};

TEST(msg, basic) {
	string httpmsg = "HTTP/1.1 200 OK\r\n"
			"Content-Type: application/json; charset=utf-8\r\n"
			"Content-Length: 5\r\n"
			"\r\n"
			"12345";
	CaHttpFrame frame;
	frame.init(false);
	frame.feedPacket((const char*)httpmsg.data(), httpmsg.size());
	auto fs = frame.status();
	ASSERT_EQ(fs, frame.FS_HDR);
	CaHttpMsg msg;
	auto res = frame.fetchMsg(msg);
	ASSERT_EQ(res, frame.MSG_WITHDATA);

}


TEST(msg, tec) {
	if(0){
		string httpmsg = "POST /index HTTP/1.1\r\n"
						"Content-Type: application/json; charset=utf-8\r\n"
						"Transfer-Encoding: chunked\r\n"
						"\r\n"
						"5\r\n"
						"12345\r\n"
						"0\r\n"
						"\r\n";
		CaHttpFrame frame;
		frame.init(true);
		auto rcnt = frame.feedPacket(httpmsg.data(), httpmsg.size());
		CaHttpMsg msg;
		auto res = frame.fetchMsg(msg);
		ASSERT_EQ(res, frame.MSG_WITHDATA);
	}
	{
		string httpmsg = "HTTP/1.1 200 OK\r\n"
				"Content-Type: application/json; charset=utf-8\r\n"
				"Transfer-Encoding: chunked\r\n"
				"\r\n"
				"5\r\n"
				"12345\r\n"
				"0\r\n"
				"\r\n";
		CaHttpFrame frame;
		frame.init(false);
		const char* ptr=httpmsg.data();
		auto rcnt = frame.feedPacket(ptr, httpmsg.size());
		ASSERT_EQ(rcnt, httpmsg.size());
		auto fs = frame.status();
		ASSERT_EQ(fs, frame.FS_HDR);
		CaHttpMsg msg;
		auto res = frame.fetchMsg(msg);
		ASSERT_EQ(res, frame.MSG_WITHDATA);
		string data;
		frame.fetchData(data);
		ASSERT_STREQ(data.data(), "12345");
	}

}

TEST(msg, frame) {
	string data;
	CaHttpFrame frame;
	frame.init(false);
	frame.feedPacket((const char*)gtec1, sizeof(gtec1));
	auto fs = frame.status();
	ali("p1: fs status=%d", fs);
	ASSERT_EQ(fs, 3);

	CaHttpMsg msg;
	auto res = frame.fetchMsg(msg);
	ASSERT_EQ(res, CaHttpFrame::MSG_WITHDATA);
	res = frame.fetchData(data);
	ASSERT_GT(data.size(), 0);
	ali("p1: data=%s", data);

	res = frame.fetchData(data);
	ali("p1: res=%d, data=|%s|", res, data);

	frame.feedPacket((const char*)gtec2, sizeof(gtec1));
	fs = frame.status();
	ali("p2: fs status=%d", fs);
}

TEST(frame2, basic) {
	HttpMsgFrame2 frame;
	frame.init(true);
	string s;
	s += "POST /index HTTP/1.1\r\n";
	s += "Content-Length: 5\r\n";
	s += "\r\n";
	s += "12345";
	auto cnt = frame.feedPacket(s.data(), s.size());
	auto fs = frame.status();
	ASSERT_EQ(fs, frame.FS_HDR);
	BaseMsg msg;
	auto fret = frame.fetchMsg(msg);
	ASSERT_EQ(fret, frame.MSG_WITHDATA);
	fs = frame.status();
	ASSERT_EQ(fs, frame.FS_DATA);
	string data;
	fret = frame.fetchData(data);
	ASSERT_STREQ(data.data(), "12345");
}
